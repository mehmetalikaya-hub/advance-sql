### 1) Creating a recursive function with CTE whick lists numbers smaaller than 10.

WITH RECURSIVE counter (previous_value) AS (
  SELECT 1
  UNION ALL
  SELECT previous_value + 1
  FROM counter
  WHERE previous_value < 10
)

SELECT * 
FROM counter;


### 2) Query shows numbers from 20 to 5 (inclusive, in descending order).

WITH RECURSIVE counter (previous_value) AS (
  SELECT 20
  UNION ALL
  SELECT previous_value -1
  FROM counter
  WHERE previous_value > 5
)

SELECT * 
FROM counter;

### 3) In the query above, we show numbers from 1 to 10 plus the respective number multiplied by two.

WITH RECURSIVE counter (
  previous_value, previous_double) AS (
  SELECT 1, 2 
  UNION ALL

  SELECT
    previous_value + 1, 
    2 * (previous_value + 1)
  FROM counter
  WHERE previous_value < 10
)

SELECT
  *
FROM counter;

4) Show two columns. In the first column (column name previous_value), 
show numbers from one to ten. In the second column (column name previous_sum), show the total sum of all numbers so far.

WITH RECURSIVE counter(previous_value,previous_sum)
AS
(
SELECT 1,1
UNION ALL 
SELECT previous_value +1,
previous_sum + previous_value +1
FROM counter  
WHERE previous_value <10  
  
)
SELECT * FROM counter

5) Create a recursive query that will show three columns:
num – even numbers from 2 to 20,
num_plus_prev – that number plus the previous number,
num_square – the number squared.

WITH RECURSIVE calc (num, num_plus_prev,num_square)
AS
(

SELECT 2,2,4
UNION ALL
SELECT num+2, num+num+2, (num+2)*(num+2)
FROM calc
WHERE num  <20  

)
SELECT * FROM calc


6) Your task is to complete the words CTE so that it generates all possible words made from those letters that have at most 5 letters. 
The shortest word should be an empty word ('').

WITH RECURSIVE letters(x) AS (
  SELECT 'a' UNION SELECT 'b'
),

words(w) AS (
SELECT ''
 UNION ALL
SELECT x || w
  FROM 
  letters,words
  WHERE length(w) < 5
)
SELECT * FROM words;

7)Template query with LIMIT and see for yourself how it works.

WITH RECURSIVE counter(previous_value) AS (
  SELECT 
    1 -- anchor member
  UNION ALL
  SELECT 
    previous_value + 1 -- recursive member
  FROM counter
) 
SELECT *
FROM counter -- invocation
LIMIT 10 -- termination check;

8) Your task is to show not only the boss, but also his immediate subordinates. 
For them, the path column should contain 'Boss->' plus the last_name of the respective employee.
Take the results from the template and UNION them with the boss's immediate subordinates.

WITH boss AS (
  SELECT 
    id, 
    first_name, 
    last_name, 
    superior_id, 
    'Boss' AS path 
  FROM employee 
  WHERE superior_id IS NULL
) 

SELECT
  id,
  first_name,
  last_name,
  superior_id,
  'Boss' AS path
FROM boss
UNION
SELECT
employee.id,
employee.first_name,
employee.last_name,
employee.superior_id,
boss.path || '->' || employee.last_name
FROM boss,employee
WHERE boss.id = employee.superior_id;


